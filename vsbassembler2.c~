#include <stdlib.h>
#include <stdio.h>

//first arg is the source file, second is the target file
//third arg is the first buffer file, fourth is the other buffer file
//buffer files can be used to examine progress, but they are basically garbage
void main(int argc, char* argv[]) {
  void vsbclean();
  void vsbmap();
  void vsbpage();
  FILE *source = fopen(argv[1], "r");
  FILE *target = fopen(argv[2], "w");
  FILE *clean = fopen(argv[3], "w");
  FILE *mapped = fopen(argv[4], "w");

  vsbclean(source, clean);
  fclose(clean);
  clean = fopen(argv[3], "r");
  vsbmap(clean, mapped);
  fclose(mapped);
  mapped = fopen(argv[4], "r");
  vsbpage(mapped, target);

  fclose(source);
  fclose(target);
  fclose(clean);
  fclose(mapped);
}

void vsbclean(FILE *source, FILE *clean) {
  char c;
  int i;
  for (c = fgetc(source); c != EOF; c = fgetc(source))
    if (c == '/')
      while ((c = fgetc(source)) != '\n')
	1;
    else if (c >= '0' && c <= '9') {
      for (i = 0; i < 4; i++, c = fgetc(source))
	fprintf(clean, "%c", c);
      c = fgetc(source);
      fgetc(source);
      fgetc(source);
      switch (c) {
      case 'j':
	if ((c = fgetc(source)) == 'i')
	  fprintf(clean, "00");
	else
	  fprintf(clean, "20");
	break;
      case 'o':
	if ((c = fgetc(source)) == '0')
	  fprintf(clean, "40");
	else
	  fprintf(clean, "60");
	break;
      case 'a':
	if ((c = fgetc(source)) == '0')
	  fprintf(clean, "80");
	else
	  fprintf(clean, "a0");
	break;
      case 'b':
	if ((c = fgetc(source)) == '0')
	  fprintf(clean, "c0");
	else
	  fprintf(clean, "e0");
	break;
      }
      c = fgetc(source);
      for (i = 0; i < 4; i++)
	fprintf(clean, "%c", (c = fgetc(source)));
      c = fgetc(source);
      for (i = 0; i < 4; i++)
	fprintf(clean, "%c", (c = fgetc(source)));
    }
}
      

void vsbmap(FILE *clean, FILE *mapped) {
  int pa, pv;
  int ba, bv;
  int v;
  int i, j;
  char c;
  for (c = fgetc(clean); c != EOF; c = fgetc(clean)) {
    for (i = 0, pa = 0, ba = 0; i < 4;
	 i++, pa = (pa << 4) + v, i < 4 ? c = fgetc(clean) : 0)
      if (c >= '0' && c <= '9')
	v = c-'0';
      else
	v = c-'a'+10;
    if (pa & (1 << 0))
      ba += (1 << 10);
    if (pa & (1 << 1))
      ba += (1 << 11);
    if (pa & (1 << 2))
      ba += (1 << 9);
    if (pa & (1 << 3))
      ba += (1 << 8);
    if (pa & (1 << 4))
      ba += (1 << 13);
    if (pa & (1 << 5))
      ba += (1 << 14);
    if (pa & (1 << 6))
      ba += (1 << 0);
    if (pa & (1 << 7))
      ba += (1 << 1);
    if (pa & (1 << 8))
      ba += (1 << 2);
    if (pa & (1 << 9))
      ba += (1 << 3);
    if (pa & (1 << 10))
      ba += (1 << 4);
    if (pa & (1 << 11))
      ba += (1 << 5);
    if (pa & (1 << 12))
      ba += (1 << 6);
    if (pa & (1 << 13))
      ba += (1 << 7);
    if (pa & (1 << 14))
      ba += (1 << 12);
    if (pa & (1 << 15))
      ba += (1 << 15);
    for (i = 0; i < 4; i++, ba = (ba << 4) % (1 << 16))
      if (ba / (1 << 12) <= 9)
	fprintf(mapped, "%c", (ba/(1 << 12))+'0');
      else
	fprintf(mapped, "%c", (ba/(1 << 12))+'a'-10);
    for (j = 0; j < 5; j++) {
      for (i = 0, pv = 0, bv = 0; i < 2; i++, pv = (pv << 4) + v)
	if ((c = fgetc(clean)) <= '9' && c >= '0')
	  v = c-'0';
	else
	  v = c-'a'+10;
      if (pv & (1 << 0))
	bv += (1 << 3);
      if (pv & (1 << 1))
	bv += (1 << 4);
      if (pv & (1 << 2))
	bv += (1 << 5);
      if (pv & (1 << 3))
	bv += (1 << 6);
      if (pv & (1 << 4))
	bv += (1 << 7);
      if (pv & (1 << 5))
	bv += (1 << 2);
      if (pv & (1 << 6))
	bv += (1 << 1);
      if (pv & (1 << 7))
	bv += (1 << 0);
      for (i = 0; i < 2; i++, bv = (bv << 4)%(1 << 8))
	if (bv/(1 << 4) <= 9)
	  fprintf(mapped, "%c", (bv/(1 << 4))+'0');
	else
	  fprintf(mapped, "%c", (bv/(1 << 4))+'a'-10);
    }
    fprintf(mapped, "\n");
  }
}

void vsbpage(FILE *mapped, FILE *target) {
  1;
}
